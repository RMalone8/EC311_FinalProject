`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 12/11/2023 06:04:27 PM
// Design Name: 
// Module Name: vga
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module vga(
 input in_clk,
 input [15:0] let_code_1,
 input [3:0] word_pos,
    output reg [3:0] VGA_R,
    output reg [3:0] VGA_G,
    output reg [3:0] VGA_B,
    output reg VGA_HS,
    output reg VGA_VS
    );
    
parameter width = 10, length = 20, doubleWidth = 20, tripleWidth = 30, doubleLength = 40, innerOffset = 2;
parameter basex1 = 30, basey1 = 30;

reg [3:0] let_red_1;
reg [3:0] let_green_1;
reg [3:0] let_blue_1;

reg[32:0] clk_count;
reg clock;

	initial begin
		clk_count = 0;
		clock = 0;
	end
	
	always @(negedge in_clk)
	begin
		clk_count = clk_count + 1;
		if (clk_count == 2) begin
			clock <= ~clock;
			clk_count <= 0;
			end
	end


    reg [31:0] count, vertical_count;
    reg [31:0] vertical_position, horizontal_position;
    reg [1:0] vertical_state, horizontal_state;
    reg vertical_trigger, vertical_blank; // triggers the vertical state machine
    // states: 0 means pre-blanking; 1 means pixels; 2 means post-blanking; 3 means synchronizing
    // pre-blanking: 48 cycles, HS high
    // pixels: 640 cycles, HS high
    // post-blanking: 16 cycles, HS high
    // synchronization: 96 cycles, HS low
    
    initial begin
        vertical_position = 0;
        count = 1;
        vertical_count = 1;
        horizontal_position = 0;
        vertical_state = 3;
        horizontal_state = 3;
        VGA_HS = 1;
        VGA_VS = 1;
        VGA_R = 0;
        VGA_G = 0;
        VGA_B = 0;
        vertical_trigger = 0;
        vertical_blank = 1; // one means blank line instead of display data
    end
    
    /////////// BEGIN HORIZONTAL STATE MACHINE //////////////
    always @(posedge clock)
    begin
        if (horizontal_state == 0) 
        begin
            // blank for 48 cycles
            if (count == 47) begin
                count <= 1;
                horizontal_state <= 1;
                // vertical_position <= vertical_position + 1;
                vertical_trigger <= 1; // to trigger the veritcal FSM on rising edge
            end
            else
            begin
                vertical_trigger <= 0;
                count <= count + 1;
            end
        end
        else if (horizontal_state == 1)
        begin
            // shift out 640 pixels
            if (horizontal_position == 640)
            begin
                // reached end of line
                VGA_R <= 0;
                VGA_G <= 0;
                VGA_B <= 0;
                horizontal_position <= 0;
                horizontal_state <= 2;
            end
            else
            begin
                if (vertical_blank == 0)
                begin
                    case(word_pos)
                        3'b000: begin
                            let_red_1 <= 8;
                            let_blue_1 <= 8;
                            let_green_1 <= 8;
                        end
                        3'b001: begin
                            let_red_1 <= 0;
                            let_blue_1 <= 0;
                            let_green_1 <= 8;
                        end
                        3'b010: begin
                            let_red_1 <= 0;
                            let_blue_1 <= 0;
                            let_green_1 <= 8;
                        end
                        3'b011: begin
                            let_red_1 <= 0;
                            let_blue_1 <= 0;
                            let_green_1 <= 8;
                        end
                        3'b100: begin
                            let_red_1 <= 0;
                            let_blue_1 <= 0;
                            let_green_1 <= 8;
                        end
                        3'b101: begin // fail state
                            let_red_1 <= 8;
                            let_blue_1 <= 0;
                            let_green_1 <= 0;
                        end
                    endcase

                    if (horizontal_position > basex1 + width && horizontal_position < basex1 + length + width && vertical_position > basey1 && vertical_position < basey1 + width && let_code_1[15] == 1) begin // 0
                        VGA_R <= let_red_1;
                        VGA_B <= let_blue_1;
                        VGA_G <= let_green_1;
                    end
                    else if (horizontal_position > basex1 && horizontal_position < basex1 + width && vertical_position > basey1 + width && vertical_position < basey1 + length + width && let_code_1[14] == 1) begin // 1
                        VGA_R <= let_red_1;
                        VGA_B <= let_blue_1;
                        VGA_G <= let_green_1;
                     end
                     else if (horizontal_position > basex1 && horizontal_position < basex1 + width && vertical_position > basey1 + length + doubleWidth && vertical_position < basey1 + doubleLength + doubleWidth && let_code_1[13] == 1) begin // 2
                        VGA_R <= let_red_1;
                        VGA_B <= let_blue_1;
                        VGA_G <= let_green_1;
                     end
                     else if (horizontal_position > basex1 + width && horizontal_position < basex1 + length + width && vertical_position > basey1 + doubleLength + doubleWidth && vertical_position < basey1 + doubleLength + tripleWidth && let_code_1[12] == 1) begin // 3
                        VGA_R <= let_red_1;
                        VGA_B <= let_blue_1;
                        VGA_G <= let_green_1;
                     end
                     else if (horizontal_position > basex1 + width + length && horizontal_position < basex1 + doubleLength + width && vertical_position > basey1 + doubleLength + doubleWidth && vertical_position < basey1 + doubleLength + tripleWidth && let_code_1[11] == 1) begin // 4
                        VGA_R <= let_red_1;
                        VGA_B <= let_blue_1;
                        VGA_G <= let_green_1;
                     end
                     else if (horizontal_position > basex1 + doubleLength + width && horizontal_position < basex1 + doubleLength + doubleWidth && vertical_position > basey1 + length + doubleWidth && vertical_position < basey1 + doubleLength + doubleWidth && let_code_1[10] == 1) begin // 5
                        VGA_R <= let_red_1;
                        VGA_B <= let_blue_1;
                        VGA_G <= let_green_1;
                     end
                     else if (horizontal_position > basex1 + doubleLength + width && horizontal_position < basex1 + doubleLength + doubleWidth &&  vertical_position > basey1 + width && vertical_position < basey1 + length + width && let_code_1[9] == 1) begin // 6
                        VGA_R <= let_red_1;
                        VGA_B <= let_blue_1;
                        VGA_G <= let_green_1;
                     end
                     else if (horizontal_position > basex1 + width + length && horizontal_position < basex1 + doubleLength + width && vertical_position > basey1 && vertical_position < basey1 + width && let_code_1[8] == 1) begin // 7
                        VGA_R <= let_red_1;
                        VGA_B <= let_blue_1;
                        VGA_G <= let_green_1;
                     end
                     else if (horizontal_position > basex1 + width + innerOffset + 1 && horizontal_position < basex1 + doubleWidth + innerOffset + 1 && vertical_position > basey1 + width && vertical_position < basey1 + length + width && let_code_1[7] == 1) begin // 8
                        VGA_R <= let_red_1;
                        VGA_B <= let_blue_1;
                        VGA_G <= let_green_1;
                     end
                     else if (horizontal_position > basex1 + width && horizontal_position < basex1 + length + width && vertical_position > basey1 + length + width && vertical_position < basey1 + length + doubleWidth && let_code_1[6] == 1) begin // 9
                        VGA_R <= let_red_1;
                        VGA_B <= let_blue_1;
                        VGA_G <= let_green_1;
                     end
                     else if (horizontal_position > basex1 + width + innerOffset + 1 && horizontal_position < basex1 + doubleWidth + innerOffset + 1 && vertical_position > basey1 + length + doubleWidth && vertical_position < basey1 + doubleLength + doubleWidth && let_code_1[5] == 1) begin // 10
                        VGA_R <= let_red_1;
                        VGA_B <= let_blue_1;
                        VGA_G <= let_green_1;
                     end
                     else if (horizontal_position > basex1 + width/2 + length && horizontal_position < basex1 + length + width/2 + width && vertical_position > basey1 + width && vertical_position < basey1 + length + width && let_code_1[4] == 1) begin // 11
                        VGA_R <= let_red_1;
                        VGA_B <= let_blue_1;
                        VGA_G <= let_green_1;
                     end
                     else if (horizontal_position > basex1 + width/2 + length && horizontal_position < basex1 + length + width/2 + width && vertical_position > basey1 + length + doubleWidth && vertical_position < basey1 + doubleLength + doubleWidth && let_code_1[3] == 1) begin // 12
                        VGA_R <= let_red_1;
                        VGA_B <= let_blue_1;
                        VGA_G <= let_green_1;
                     end
                     else if (horizontal_position > basex1 + width + length + innerOffset && horizontal_position < basex1 + doubleWidth + length + innerOffset && vertical_position > basey1 + width && vertical_position < basey1 + length + width && let_code_1[2] == 1) begin // 13
                        VGA_R <= let_red_1;
                        VGA_B <= let_blue_1;
                        VGA_G <= let_green_1;
                     end
                     else if (horizontal_position > basex1 + width + length && horizontal_position < basex1 + doubleLength + width && vertical_position > basey1 + length + width && vertical_position < basey1 + length + doubleWidth && let_code_1[1] == 1) begin // 14
                        VGA_R <= let_red_1;
                        VGA_B <= let_blue_1;
                        VGA_G <= let_green_1;
                     end
                     else if (horizontal_position > basex1 + length/2 + length && horizontal_position < basex1 + length/2 + length + width && vertical_position > basey1 + length + doubleWidth && vertical_position < basey1 + doubleLength + doubleWidth && let_code_1[0] == 1) begin // 15
                        VGA_R <= let_red_1;
                        VGA_B <= let_blue_1;
                        VGA_G <= let_green_1;
                     end
                     else begin
                        VGA_R <= 0;
                        VGA_B <= 0;
                        VGA_G <= 0;
                    end
                end
                else
                begin
                    VGA_B <= 0;
                end
                horizontal_position <= horizontal_position + 1;
            end
        end
        else if (horizontal_state == 2)
        begin
            // blank for 16 cycles
            if (count == 16) begin
                count <= 1;
                VGA_HS <= 0;
                horizontal_state <= 3;
            end
            else
            begin
                count <= count + 1;
            end
        end
        else // 3
        begin
            // sync for 96 cycles
            if (count == 96) begin
                VGA_HS <= 1;
                count <= 1;
                horizontal_state <= 0;
            end
            else
            begin
                count <= count + 1;
            end
        end
    end
    
    /////////// BEGIN VERTICAL STATE MACHINE //////////////
    always @(posedge vertical_trigger)
    begin
        if (vertical_state == 0) 
        begin
            // blank for 33 lines
            if (vertical_count == 32) begin
                vertical_count <= 1;
                vertical_state <= 1;
            end
            else
            begin
                vertical_count <= vertical_count + 1;
            end
        end
        else if (vertical_state == 1)
        begin
            // shift out 480 lines
            if (vertical_position == 480)
            begin
                // reached end of frame
                vertical_position <= 0;
                vertical_state <= 2;
                vertical_blank <= 1;
            end
            else
            begin
                vertical_blank <= 0; // start displaying data instead of blanking
                vertical_position <= vertical_position + 1;
            end
        end
        else if (vertical_state == 2)
        begin
            // blank for 10 lines
            if (vertical_count == 10) begin
                vertical_count <= 1;
                VGA_VS <= 0;
                vertical_state <= 3;
            end
            else
            begin
                vertical_count <= vertical_count + 1;
            end
        end
        else // 3
        begin
            // sync for 2 lines
            if (vertical_count == 2) begin
                VGA_VS <= 1;
                vertical_count <= 1;
                vertical_state <= 0;
            end
            else
            begin
                vertical_count <= vertical_count + 1;
            end
        end
    end
endmodule
<<<<<<< HEAD
=======


>>>>>>> fd439848ace82ab848abfc9aaeafc0fd99636e28